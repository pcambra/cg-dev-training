<?php

/**
 * Implements hook_entity_info().
 */
function commerce_sr_entity_info() {
  $return = array();

  $return['recommendation'] = array(
    'label' => t('Recommendation'),
    'entity class' => 'Entity',
    'controller class' => 'EntityAPIController',
    'views controller class' => 'EntityDefaultViewsController',
    'base table' => 'commerce_sr',
    'module' => 'commerce_sr',
    'fieldable' => TRUE,
    'entity keys' => array(
      'id' => 'id',
      'bundle' => 'type',
    ),
    'bundles' => array(
      'recommendation' => array('label' => 'Recommendation'),
    ),
  );


  return $return;
}

/**
 * Implements hook_field_formatter_info().
 */
function commerce_sr_field_formatter_info() {
  return array(
    'commerce_sr_no_decimals' => array(
      'label' => t('Price with no decimal places'),
      'field types' => array('commerce_price'),
      'settings' => array(
        'calculation' => TRUE,
      ),
    ),
    'commerce_sr_amount_without_currency' => array(
      'label' => t('Amount without currency'),
      'field types' => array('commerce_price'),
      'settings' => array(
        'calculation' => FALSE,
      ),
    ),
  );
}


/**
 * Implements hook_field_formatter_view().
 */
function commerce_sr_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  // Loop through each price value in this field.
  foreach ($items as $delta => $item) {
    // Do not render a price if the amount is NULL (i.e. non-zero empty value).
    if (is_null($item['amount'])) {
      continue;
    }

    // Theme the display of the price based on the display type.
    switch ($display['type']) {
      case 'commerce_sr_no_decimals':
        $amount = commerce_currency_amount_to_decimal($item['amount'], $item['currency_code']);
        $currency = commerce_currency_load($item['currency_code']);

        $decimal_pos = strpos($amount, $currency['decimal_separator']);
        $amount = commerce_currency_decimal_to_amount((int) substr($amount, 0, $decimal_pos), $item['currency_code']);

        $markup = commerce_currency_format($amount , $item['currency_code']);

        $element[$delta] = array(
          '#markup' => $markup,
        );
      break;
      case 'commerce_sr_amount_without_currency':
        $element[$delta] = array(
          '#markup' => commerce_currency_amount_to_decimal($item['amount'], $item['currency_code']),
        );
        break;
    }
  }

  return $element;
}

/**
 * Implements hook_commerce_cart_product_add().
 *
 * Creates a recommendation entity.
 */
function commerce_sr_commerce_cart_product_add($order, $product, $quantity, $line_item) {
  $rec = entity_create('recommendation', array(
    'type' => 'recommendation',
    'uid' => $order->order_id,
    'product_id' => $product->product_id,
    'recommendation_price' => $product->commerce_price,
    'date' => time(),
  ));
  $rec->save();
}

/**
 * Callback for getting recommendation properties.
 * @see commerce_sr_entity_property_info()
 */
function commerce_sr_get_properties($rec, array $options, $name) {
  switch ($name) {
    case 'time_ago':
      $datetime = new DateTime();
      $datetime->setTimestamp($rec->date);
      $now = new DateTime();
      $interval = $datetime->diff($now);
      return t('@time hours ago', array('@time' => $interval->format('%h')));
      break;
  }
}

/**
 * Implements hook_views_api().
 */
function commerce_sr_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'commerce_sr') . '/includes/views',
  );
}
